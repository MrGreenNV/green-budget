# Тип данных для пользователя
type User {
    id: ID!
    uid: String!
    username: String!
    email: String!
    createdAt: String!
    updatedAt: String!
    status: EntityStatus!
    accounts: [FinancialAccount]
}

# Перечисление для статуса сущности
enum EntityStatus {
    ACTIVE
    DELETED
}

# Тип данных для финансового аккаунта (если требуется)
type FinancialAccount {
    id: ID!
    accountName: String!
    balance: Float!
}

# Входные данные для создания пользователя
input CreateUserInput {
    username: String!
    email: String!
    password: String!
}

# Входные данные для обновления пользователя
input UpdateUserInput {
    username: String
    email: String
    password: String
}

# Запросы (Query)
type Query {
    getUserInfo(id: ID!): User
    getAllActiveUsers(page: Int, size: Int): [User!]
    getAllUsers(page: Int, size: Int): [User!]
}

# Мутации (Mutation)
type Mutation {
    createUser(input: CreateUserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    deleteUser(id: ID!): Boolean!
}


# Welcome to GraphiQL
#
# GraphiQL is an in-browser tool for writing, validating, and
# testing GraphQL queries.
#
# Type queries into this side of the screen, and you will see intelligent
# typeaheads aware of the current GraphQL type schema and live syntax and
# validation errors highlighted within the text.
#
# GraphQL queries typically start with a "{" character. Lines that start
# with a # are ignored.
#
# An example GraphQL query might look like:
#
#     {
#       field(arg: "value") {
#         subField
#       }
#     }
#
# Keyboard shortcuts:
#
#   Prettify query:  Shift-Ctrl-P (or press the prettify button)
#
#  Merge fragments:  Shift-Ctrl-M (or press the merge button)
#
#        Run Query:  Ctrl-Enter (or press the play button)
#
#    Auto Complete:  Ctrl-Space (or just start typing)
#
# query {
#   getUserInfo(id: 1) {
#     username, id, email, accounts{accountName}
#   }
# }
# mutation {
#   createUser(input: {
#     username: "new_user1",
#     email: "new_user1@example.com",
#     password: "password123"
#   }) {
#     id
#     username
#     email
#   }
# }

# query {
#   getAllActiveUsers(page: 0, size: 10) {
#     username, id, email, accounts{accountName}
#   }
# }